extend type Mutation {
    createProfile(input: CreateProfileInput!): ProfileResult!
    updateProfile(input: UpdateProfileInput!): ProfileResult!
    updateProfileSequence(input: [UpdateProfileSequenceInput]!): [ProfileResult]!
}

extend type Query {
    profileByUserId: [ProfileResult]!
}

input CreateProfileInput {
    employmentStatus: EmploymentStatus!
    workplaceName: String
    employmentForm: EmploymentForm
    income: Int
    employmentDate: Date
    purposeOfLoan: PurposeOfLoan!
    desiredLoanAmount: Int!
    loanProductUsageStatus: LoanProductUsageStatus!
    loanProductUsageCount: Int!
    totalLoanUsageAmount: Int!
    creditScore: Int
    creditGradeStatus: CreditGradeStatus
    profileName: String!
}

input UpdateProfileInput {
    id: Long
    employmentStatus: EmploymentStatus!
    workplaceName: String
    employmentForm: EmploymentForm
    income: Int
    employmentDate: Date
    purposeOfLoan: PurposeOfLoan!
    desiredLoanAmount: Int!
    loanProductUsageStatus: LoanProductUsageStatus!
    loanProductUsageCount: Int!
    totalLoanUsageAmount: Int!
    creditScore: Int!
    creditGradeStatus: CreditGradeStatus!
    profileName: String!
}

input UpdateProfileSequenceInput {
    id: Long!
    seq: Int!
}

type ProfileResult {
    purposeOfLoan: PurposeOfLoan!
    employmentStatus: EmploymentStatus!
    creditGradeStatus: CreditGradeStatus!
    loanProductUsageCount: Int!
    totalLoanUsageAmount: Int!
    desiredLoanAmount: Int!
    profileName: String!
}

enum LoanUsageStatus {
    USING, NOT_USING
}

enum EmploymentStatus {
    EMPLOYEE
    SELF_EMPLOYED
    PUBLIC_SERVANT
    UNEMPLOYED
    OTHER
}

enum EmploymentForm {
    FULL_TIME
    CONTRACT
}

enum PurposeOfLoan {
    LIVING_EXPENSES
    TUITION
    HOUSING
    BUSINESS_FUNDS
    MEDICAL_OR_EMERGENCY
    LOAN_REPAYMENT
}

enum LoanProductUsageStatus {
    USING
    NOT_USING
}

enum CreditGradeStatus {
    UPPER
    MIDDLE
    LOWER
}

